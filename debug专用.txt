void compute_sig(Certificate *cert){
    // 1. 生成CA RSA密钥对
    mpz_t n, d, e;
    mpz_inits(n, d, e, NULL);

    unsigned char d_key[] = {
        0x0F, 0xC6, 0x6F, 0xF2, 0x28, 0x35, 0xF5, 0xC8, 0xE4, 0x5E, 0x70, 0xBE, 0x59, 0x1E, 0x68, 0x47, 
        0x90, 0x20, 0x6E, 0xEB, 0xD5, 0xD7, 0x2F, 0xA4, 0x48, 0x0D, 0x18, 0x1C, 0xC4, 0x49, 0x48, 0x6F, 
        0x0C, 0x24, 0x6C, 0x64, 0xB6, 0x27, 0x74, 0x7B, 0x85, 0xF8, 0xEE, 0xC7, 0xAA, 0x24, 0xCA, 0x99, 
        0x7A, 0x4F, 0xBC, 0x4C, 0xD2, 0x2B, 0x1F, 0xF9, 0x92, 0xC8, 0x46, 0x7E, 0x32, 0x80, 0xBB, 0x86, 
        0x2B, 0xBC, 0x2A, 0xBA, 0x3A, 0x1B, 0x2A, 0x38, 0x76, 0x0C, 0x4E, 0xD6, 0xCE, 0x16, 0x2E, 0x7C, 
        0x9B, 0x4E, 0xCF, 0x3C, 0x56, 0xCD, 0x38, 0x2D, 0x4F, 0x90, 0xE0, 0x38, 0xA0, 0x7C, 0x43, 0x89, 
        0x4C, 0xB3, 0x23, 0x8D, 0x61, 0x9F, 0xC3, 0xE8, 0xA7, 0xF2, 0xFD, 0xA7, 0x3C, 0xB3, 0x6A, 0xD7, 
        0xB9, 0x31, 0x1D, 0x33, 0x9E, 0x22, 0xCC, 0xF4, 0x44, 0x2D, 0xA9, 0x1D, 0xC0, 0xCD, 0xBD, 0x29, 
        0xEF, 0xAA, 0xFE, 0x40, 0xDA, 0xB1, 0x68, 0x2D, 0x5F, 0x02, 0xDE, 0xE3, 0x52, 0x97, 0x03, 0x01, 
        0x1D, 0x26, 0x53, 0x51, 0x6C, 0x1F, 0xA8, 0x28, 0xBE, 0x06, 0x80, 0x39, 0xF4, 0xC8, 0x4A, 0x2D, 
        0x72, 0xB8, 0x77, 0xDE, 0x7E, 0xD4, 0xA4, 0x8F, 0x75, 0x03, 0x7A, 0x86, 0xA4, 0x08, 0xAE, 0x84, 
        0x66, 0x79, 0xE1, 0x39, 0x78, 0x0E, 0x5C, 0x80, 0x29, 0xCB, 0xE6, 0x4F, 0x99, 0xFC, 0xBD, 0x55, 
        0x9F, 0x5A, 0x7F, 0x6E, 0x7A, 0x61, 0x3D, 0x48, 0xE4, 0x92, 0xA4, 0x10, 0x16, 0x0F, 0x70, 0xCD, 
        0xA7, 0x62, 0x4D, 0xC1, 0xF1, 0x74, 0xE1, 0xD5, 0xD1, 0xB7, 0xB7, 0x9C, 0xD0, 0xAE, 0xDC, 0xA3, 
        0x28, 0x3F, 0x64, 0x92, 0x4A, 0x21, 0xF9, 0x2D, 0xF9, 0x99, 0x9A, 0x2E, 0xDD, 0x66, 0xF5, 0xF7, 
        0xD2, 0x4A, 0x7A, 0xA2, 0x59, 0x1A, 0x68, 0x7B, 0x2D, 0x85, 0x93, 0xB5, 0x22, 0x7A, 0xF1, 0x01
    };
    unsigned char n_key[] = {
            0xB0, 0x6D, 0x07, 0x30, 0xC2, 0xAB, 0x82, 0xD5, 0x48, 0x23, 0xDF, 0x02, 0x00, 0xE8, 0x1F, 0x04, 
            0x09, 0x6F, 0x9E, 0xAD, 0xE7, 0x51, 0x7E, 0xD7, 0x45, 0x6E, 0xF8, 0x37, 0xC2, 0xC1, 0x1F, 0xA4, 
            0xA2, 0x50, 0x67, 0xD8, 0xF7, 0xF8, 0x13, 0xB3, 0x91, 0xC1, 0xA6, 0x35, 0x29, 0x9B, 0xE7, 0x75, 
            0xD1, 0x38, 0xBB, 0x2C, 0xD7, 0xA1, 0xBB, 0x5B, 0x29, 0x7E, 0xBE, 0xC0, 0xF5, 0xFE, 0x2A, 0x96, 
            0xF2, 0x4C, 0x1F, 0x08, 0xC6, 0x0B, 0xB8, 0xDC, 0xE3, 0x60, 0x25, 0xE1, 0x75, 0xD2, 0x11, 0x3F, 
            0x29, 0x36, 0xCE, 0x55, 0xE3, 0x68, 0xF9, 0xFE, 0x97, 0x3F, 0xC5, 0xB3, 0x7E, 0x34, 0x3F, 0xD9, 
            0x91, 0x0E, 0x83, 0xC7, 0x9B, 0xEB, 0xF8, 0xAD, 0xDD, 0x35, 0xE4, 0x23, 0x66, 0xB0, 0xD2, 0x2D, 
            0xF5, 0x8D, 0x4C, 0x38, 0x69, 0xD3, 0x66, 0x88, 0xB3, 0x05, 0xA5, 0xFB, 0x30, 0xE7, 0xF8, 0xA7, 
            0x2E, 0x4B, 0xC4, 0xD6, 0x84, 0x01, 0x6E, 0x68, 0xA2, 0x1F, 0x7E, 0xAC, 0xF9, 0x10, 0xAA, 0xF8, 
            0xCF, 0xCD, 0x85, 0x2A, 0x49, 0x6B, 0xB5, 0x5A, 0xE1, 0x2C, 0xAD, 0xFA, 0x84, 0xE5, 0x16, 0x33, 
            0xCF, 0xB7, 0xEC, 0xCA, 0x5B, 0xE4, 0x60, 0xD8, 0x88, 0xF1, 0x65, 0xAA, 0xD5, 0x94, 0xBE, 0x6E, 
            0x7E, 0x82, 0xE4, 0xCC, 0x30, 0xA7, 0x44, 0x67, 0xE3, 0x71, 0xA3, 0x42, 0xBD, 0xEC, 0x0B, 0xA9, 
            0xB1, 0x08, 0xF8, 0x10, 0xA4, 0xDF, 0x59, 0xCD, 0xB4, 0xB0, 0xCF, 0x7C, 0xDB, 0x64, 0x35, 0x8E, 
            0x5B, 0xEE, 0x41, 0xC9, 0xFC, 0xCE, 0x13, 0x13, 0x35, 0xC7, 0x4C, 0x16, 0xE6, 0x0B, 0xEA, 0x76, 
            0xD1, 0x02, 0x1D, 0xB8, 0x19, 0xC2, 0xDC, 0xCC, 0x25, 0x52, 0x45, 0x99, 0x88, 0x0A, 0xF2, 0xAE, 
            0x56, 0x7A, 0xF7, 0xD7, 0x5E, 0xC8, 0xB0, 0x84, 0x72, 0x49, 0x83, 0x50, 0x69, 0x16, 0x29, 0xF5
    };
    unsigned char e_key[] = {0x01, 0x00, 0x01};

    buffer_to_mpz(d, sizeof(d_key), d_key);
    buffer_to_mpz(n, sizeof(n_key), n_key);
    buffer_to_mpz(e, sizeof(e_key), e_key);

    // 先hash
    memset(cert->signature, 0, sizeof(cert->signature));
    unsigned char buffer[1024];
    unsigned char cert_hash[32];
    certificate_to_buffer(cert, buffer);
    sha256(buffer, sizeof(Certificate), cert_hash);

    mpz_t plaintext, cipher, decrypttext;
    mpz_inits(plaintext, cipher, decrypttext, NULL); //初始化变量
    buffer_to_mpz(plaintext, sizeof(cert_hash), cert_hash);
    decrypt(cipher, plaintext, d, n);

    unsigned char dbg[256];
    mpz_to_buffer(cipher, sizeof(dbg), dbg);

    size_t len = 256;
    printf("unsigned char sig[] = {");
    for (size_t i = 0; i < len; i++) {
        if (i % 16 == 0) {
            printf("\n    ");
        }
        printf("0x%02X", dbg[i]);
        if (i != len - 1) {
            printf(", ");
        }
    }
    printf("\n};\n");

    gmp_printf("Plain: %Zx\n", plaintext);
    gmp_printf("Encrypted: %Zx\n", cipher);
    encrypt(decrypttext, cipher, e, n);
    gmp_printf("Decrypted: %Zx\n", decrypttext);
}